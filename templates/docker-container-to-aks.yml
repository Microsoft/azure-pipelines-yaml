# Docker image, Azure container registry and Azure kubernetes service
# Build a Docker image, push to a container registry and deploy to Azure kubernetes service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

resources:
- repo: self

variables:
  Azure.ServiceConnectionId: '<Fill this with AzureRm service connection id>'
  Azure.ResourceGroupName: '<Fill this with Azure resoure group name>' # if Azure.CreateResources=true then resource group will be automatically created
  Azure.Location: '<Fill this with preferred Azure location>'
  AKS.ClusterName: '<Fill this with Azure kubernetes cluster name>' # if Azure.CreateResources=true then cluster will be automatically created
  AKS.DepoymentPort: '<Fill this with app port number>'
  Azure.CreateResources: 'true' # set this to false if you want to skip resource group, acr, aks creation
  AKS.KubeDeploymentFile: '$(System.DefaultWorkingDirectory)/KubeDeployment.yml'
  System.Debug: 'false'

phases:

- phase: Phase_1
  displayName: Create resources
  condition: and(succeeded(), eq(variables['Azure.CreateResources'], 'true'))

  queue:
    name: Hosted Ubuntu 1604

  steps:
  - powershell: |
      $lowerCaseBuildDefinitionName  = "$(Build.DefinitionName)".ToLower()
      Write-Host "##vso[task.setvariable variable=ACR.Name;]$lowerCaseBuildDefinitionName"
    displayName: 'Generate variables'

  - task: AzureCLI@1
    displayName: 'Create resources if required'
    inputs:
      connectedServiceNameARM: '$(Azure.ServiceConnectionId)'
      scriptLocation: inlineScript
      inlineScript: |
        #!/bin/bash
        RGExists=$(az group exists --name $(Azure.ResourceGroupName))
        echo "RG exists: $RGExists"
        if [ $RGExists = false ]
        then
          CREATED_RG=$(az group create --name $(Azure.ResourceGroupName) --location $(Azure.Location))
          echo "$CREATED_RG"
        fi
        CREATE_ACR=$(az acr check-name -n $(ACR.Name) --query nameAvailable)
        echo "Create ACR: $CREATE_ACR"
        if [ $CREATE_ACR = true ]
        then
          CREATED_ACR=$(az acr create -n $(ACR.Name) -g $(Azure.ResourceGroupName) --sku $(ACR.Sku))
          echo "$CREATED_ACR"
        fi

- phase: Phase_2
  displayName: Build
  dependsOn: Phase_1
  condition: or(succeeded(), ne(variables['Azure.CreateResources'], 'true'))

  queue:
    name: Hosted Ubuntu 1604

  steps:
  - powershell: |
      $lowerCaseBuildDefinitionName  = "$(Build.DefinitionName)".ToLower()
      $acrImageName = $lowerCaseBuildDefinitionName + ":$(Build.BuildId)"
      Write-Host "##vso[task.setvariable variable=ACR.Name;]$lowerCaseBuildDefinitionName"
      Write-Host "##vso[task.setvariable variable=ACR.FullName;]$lowerCaseBuildDefinitionName.azurecr.io"
      Write-Host "##vso[task.setvariable variable=ACR.RepositoryName;]$lowerCaseBuildDefinitionName"
      Write-Host "##vso[task.setvariable variable=ACR.ImageName;]$acrImageName"
    displayName: 'Generate variables'

  - task: Docker@0
    displayName: 'Build an image'
    inputs:
      azureSubscriptionEndpoint: '$(Azure.ServiceConnectionId)'
      containerregistrytype: 'Azure Container Registry'
      azureContainerRegistry: '$(ACR.FullName)'
      imageName: '$(ACR.ImageName)'
      action: 'Build an image'
      dockerFile": '**/Dockerfile'

  - task: Docker@0
    displayName: 'Push an image'
    inputs:
      azureSubscription: '$(Azure.ServiceConnectionId)'
      azureContainerRegistry: '$(ACR.FullName)'
      action: 'Push an image'
      imageName: '$(ACR.ImageName)'

- phase: Phase_3
  displayName: Deploy
  dependsOn: Phase_2
  condition: succeeded()

  queue:
    name: Hosted Ubuntu 1604

  steps:
  - powershell: |
      $lowerCaseBuildDefinitionName  = "$(Build.DefinitionName)".ToLower()
      $acrImageName = $lowerCaseBuildDefinitionName + ":$(Build.BuildId)"
      Write-Host "##vso[task.setvariable variable=ACR.Name;]$lowerCaseBuildDefinitionName"
      Write-Host "##vso[task.setvariable variable=ACR.FullName;]$lowerCaseBuildDefinitionName.azurecr.io"
      Write-Host "##vso[task.setvariable variable=ACR.RepositoryName;]$lowerCaseBuildDefinitionName"
      Write-Host "##vso[task.setvariable variable=ACR.ImageName;]$acrImageName"
      $kubeDeploymentFileExists = Test-Path $(AKS.KubeDeploymentFile)
      Write-Host "##vso[task.setvariable variable=AKS.KubeDeploymentFileExists;]$kubeDeploymentFileExists"
    displayName: 'Generate variables'

  - powershell: |  
       $kubeDeploymentYaml = "apiVersion: apps/v1beta1
       kind: Deployment
       metadata:
         name: $(ACR.RepositoryName)
       spec:
         replicas: 1
         template:
           metadata:
             labels:
               app: $(ACR.RepositoryName)
           spec:
             containers:
             - name: $(ACR.RepositoryName)
               image: $(ACR.FullName)/$(ACR.ImageName)
               ports:
               - containerPort: $(AKS.DepoymentPort)
       ---
       apiVersion: v1
       kind: Service
       metadata:
         name: $(ACR.RepositoryName)
       spec:
         type: LoadBalancer
         ports:
         - port: $(AKS.DepoymentPort)
         selector:
           app: $(ACR.RepositoryName)"
       
       Set-Content -Path $(AKS.KubeDeploymentFile) -Value $kubeDeploymentYaml 
    displayName: 'Generate deployment yaml'
    condition: and(succeeded(), eq(variables['AKS.KubeDeploymentFileExists'], 'False'))

  - task: Kubernetes@1
    displayName: 'kubectl apply'
    inputs:
      azureSubscriptionEndpoint: '$(Azure.ServiceConnectionId)'
      azureResourceGroup: '$(Azure.ResourceGroupName)'
      kubernetesCluster: '$(AKS.ClusterName)'
      arguments: '-f $(AKS.KubeDeploymentFile)'